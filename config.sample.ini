# Hello! This is the configuration for ærialbot. It's written in ConfigObj's
# "unrepr" dialect, which basically means that the values of the key-value pairs
# observe the usual Python semantics.


[GENERAL]

# This option steers how talkative ærialbot is on the command line. If set to
# "quiet", only errors are output. If set to "verbose", status messages are
# printed as well, along with a snazzy progress indicator during tile download
# (if you prefer a not-quite-so-snazzy progress indicator, set this option to
# "normal" instead). If set to "deafening", all kinds of debugging information
# is printed, too. Should you be planning to run ærialbot as a cronjob or
# similar, I recommend the "quiet" setting, while "deafening" is well-suited for
# testing.
verbosity = "verbose"

# If not set to None, whatever would be printed in the "deafening" output mode
# (but not the progress indicator) will be written to this file as well. This
# log is not autorotated – so it'll grow to fill your hard drive on an infinite
# time scale.
logfile = "/PATH/TO/aerialbot/aerialbot.log"

# Temporary storage location for tiles, allowing them to be cached and reused.
# Note 1: ærialbot doesn't delete old images, so given enough time, the storage
# directory will grow to fill your hard drive.
# Note 2: You can set this setting to None, though – this will disable tile
# caching altogether.
# Note 3: Make sure to supply an absolute path here – otherwise it will be
# interpreted relative to the current working directory, which is not what you
# want when running ærialbot via cron or something like that.
# Note 4: The file extension must match the format of your tiles (see further
# down).
# Note 5: The "hash" variable is a hash of the tile URL template configurable
# further down. This is to avoid recalling cached imagery from a different
# service (or version) than the one currently in use, which can happen when
# using the same directory to store tiles from different ærialbot instances.
# Note 6: The "angle_if_oblique" variable evaluates to an empty string if the
# "tile_url_template" option isn't one of the "googlemaps-oblique-*" variants.
tile_path_template = "/PATH/TO/aerialbot/aerialbot-tiles/{angle_if_oblique}z{zoom}x{x}y{y}-{hash}.jpg"

# Path where the result image will be stored. You can use the following
# variables (some of which are directly derived from the config options
# described further down) in your filename:
# | variable               | example value                              |
# | ---------------------- | ------------------------------------------ |
# | {datetime}             | 2020-04-01T20.40.22                        |
# | {direction}            | downward                                   |
# | {latitude}             | 37.627192021264214                         |
# | {longitude}            | -107.98992174140965                        |
# | {width}                | 1610                                       |
# | {height}               | 1610                                       |
# | {max_meters_per_pixel} | 0.5                                        |
# | {xmin}                 | 26214                                      |
# | {xmax}                 | 26222                                      |
# | {ymin}                 | 50726                                      |
# | {ymax}                 | 50734                                      |
# | {zoom}                 | 17                                         |
# | {georect}              | sw35.20686,-118.99304ne35.22483,-118.96006 |
# Note 1: Similar caveats as above apply regarding deletion and absolute paths.
# You must not set this setting to None, though – but specifying a constant
# filename (i.e. not using any of the variables) ensures that only the most
# recent image is kept in the file system at all times.
# Note 2: Here, you can choose a different file type (among the ones PIL
# supports, anyway).
image_path_template = "/PATH/TO/aerialbot/aerialbot-{datetime}-{direction}-{latitude},{longitude}-{width}x{height}m-z{zoom}.jpg"

# Number of retries (starting at random point generation and proceeding from
# there) that should be performed if there's no sufficiently-high-quality
# imagery for a randomly generated point at the relevant zoom level.
max_tries = 10

# The highest available zoom level is frequently blurry or pixelated. To avoid
# posting such imagery, ærialbot checks whether imagery exists for a higher
# zoom level than was selected. This option sets that delta – e.g. if the
# selected zoom level is 16 and this option is set to 2, zoom level 18 will be
# checked and, if there's no imagery for it, another random point will be
# generated (see "max_retries" option above). If set to 0, the quality check is
# effectively skipped (it still takes place, but really just preloads the corner
# tiles). Don't set this option to a value larger than 4.
quality_check_delta = 2

[GEOGRAPHY]

# The URL scheme that map tiles will be downloaded from. You can use any of the
# following variables:
# | variable              | example value |
# | --------------------- | ------------- |
# | {x}                   | 50292         |
# | {y}                   | 395           |
# | {zoom}                | 16            |
# For simplicity's sake, there's also a number of presets - specify one of them
# and ærialbot will take care of the rest:
# * "googlemaps"
# * "googlemaps-oblique-northward"
# * "googlemaps-oblique-eastward"
# * "googlemaps-oblique-southward"
# * "googlemaps-oblique-westward"
# * "googlemaps-oblique-random" (randomly selects one of the four directions)
# * "navermap" (only provides high-resolution imagery for South Korea)
# Note 1: The "googlemaps-oblique-*" presets access the 45-degree imagery Google
# Maps makes available when zooming into many cities around the world, giving
# buildings and other structures some dimensionality. Such imagery is usually
# derived from 3D models, so it may look a bit off (at the time of writing, the
# Empire State Building looks rather distorted, for example). Note that
# "northward" yields a north-looking view (showing the south face of buildings).
# Also note that the foreshortening inherent in a 45-degree side-on view means
# that a square geographical area corresponds to an image with a 1:√2 aspect
# ratio.
# Note 2: This tool isn't specific to Google Maps or Naver Map – most online
# mapping services also use 256x256 px tiles that are laid out based on the Web
# Mercator projection (https://en.wikipedia.org/wiki/Web_Mercator_projection).
# A somewhat outdated list of tile providers can be found at
# https://github.com/ANAT01/map-list-servers/.
tile_url_template = "googlemaps"

# Absolute path (as above) to the shapefile used for random location selection
# in a region, country or continent.
# Note 1: ærialbot isn't very sophisticated – it's only built to deal with
# shapefiles that follow the following convention (see shapefiles/README.md for
# a guide on how to make arbitrary shapefiles conform to this standard):
# 1. The shapefile contains a single layer
# 2. with one or more records/shapes
# 3. of type POLYGON
# 4. whose points are notated as longitude-latitude pairs (CRS: +proj=longlat).
# Note 2: ærialbot is quite sophisticated – the distribution of random points
# takes into account that at high latitudes, neighboring meridians are closer
# together than at the equator. (If a uniform distribution on latitudes and
# longitudes was used instead, random points would be biased towards the poles.)
shapefile = "/PATH/TO/aerialbot/shapefiles/usa/usa.shp"

# Shapefile to exclude from random location selection. The same rules and
# caveats as above apply.
exclude_shapefile = None

# Alternatively, you can – for testing purposes, for example – set a geopoint,
# i.e. a latitude-longitude pair. If this point is not None, it will be used
# instead of a random point from the shapefile, which will then not even be
# loaded.
# Note: point = (35.215849, -118.976555) is quite handy for testing.
point = None

# The following two settings determine the dimensions of the depicted area in
# meters.
# Note 1: This, too, accounts for meridians being closer together at high
# latitudes and the implications this has when combines with the Mercator
# projection – the bottom line is that you don't have to worry about such
# details, if you set the width to 1000 meters, the result image is going to
# cover an area that's 1000 meters wide, whether the selected location is in
# Ecuador or in Greenland.
# Note 2: Of course, the available imagery might be distorted a bit, but that's
# not within the control of this tool.
# Note 3: A mile is about 1610 meters.
width = 2000
height = 2000


[IMAGE]

# ærialbot can automatically resize the result image to your desired dimensions.
# * If you specify only image width or height (i.e. set the other value to None)
#   the other value will be inferred automatically.
# * If you set both image width and height here, the result image may end up
#   distorted if they don't match the width and height of the depicted area
#   (accounting for foreshortening if an oblique view is configured).
# * And if you set both of them to None, the resolution will not be changed from
#   the original map tiles. Note that this can result in widely different image
#   sizes depending on the selected latitude. Plus, in this case you MUST set a
#   value for the max_meters_per_pixel setting.
image_width = 1000
image_height = None

# This setting, which sets the maximally allowable meters contained in a single
# pixel of the result image (i.e. after scaling to image_width/image_height),
# determines the required tile zoom level, setting it as coarse as possible (to
# conserve bandwidth and processing overhead) while still fulfilling this
# constraint.
# * It is required if you have specified neither image width nor image height,
#   otherwise it's optional.
# * If you have specified an image width but not an image height, your value of
#   this setting is multiplied with the width of the depicted area divided by
#   image width. If this setting it set to None, 1 will be used in its place –
#   this guarantees that at least 1 tile pixel corresponds to each result pixel.
#   In other words, in this situation, this option turns into a way of
#   retrieving higher-than-required-resolution imagery that's then scaled down
#   again, e.g. specifying 0.5 yields twice the resolution, which can be handy
#   in rare situations.
# * If you have specified an image height but no image width, it's analogous.
# * If you have specified both, whichever of the previously explained two
#   variants imposes a tighter constraint is used.
# Note 1: Basically, smaller values here lead to crisper detail.
# Note 2: Satellite imagery is not available in high detail for all regions of
# the world (even in places like the US), so a value lower than 1 may lead to a
# high number of retries during the random point selection process.
max_meters_per_pixel = None

# Whether to amp up the colors and contrast a little bit.
apply_adjustments = True

# Which level of quality to target during JPEG compression (between 0 and 100,
# higher values imply higher quality but larger files).
image_quality = 90


[MASTODON]

# Information required for posting to Mastodon. Go to your bot account's
# settings, "Development", "New Application", decide on an application name and
# select the "write:media" and "write:statuses" scopes (and unselect everything
# else just in case), click "Submit", then click on the newly created
# application's name – you'll find the access token there.
# Note: If any of these two values is set to None, Mastodon posting will be
# disabled, but the result images will still be generated as configured.
api_base_url = "https://botsin.space"
access_token = None

# The text of each toot. You can use the following variables in your string:
# | variable               | example value                                                              |
# | ---------------------- | -------------------------------------------------------------------------- |
# | {direction}            | westward                                                                   |
# | {direction_capitalize} | Downward                                                                   |
# | {latitude}             | 38.93490955793527                                                          |
# | {longitude}            | -87.71460377200692                                                         |
# | {point_fancy}          | 35°12'57.1"N 118°58'35.6"W                                                 |
# | {area_size}            | 34.74 × 19.52 km                                                           |
# | {osm_url}              | https://www.openstreetmap.org/#map=18/40.84034204865187/-73.93902731230716 |
# | {googlemaps_url}       | https://www.google.com/maps/@40.84034204865187,-73.93902731230716,18z      |
# | {location_globe_emoji} | 🌏                                                                         |
toot_text = "{point_fancy}"
